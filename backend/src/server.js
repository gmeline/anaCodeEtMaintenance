import { Builder, By } from "selenium-webdriver";
import { createJiraIssue } from "./jira.js";

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function testE2E() {
  const driver = await new Builder().forBrowser("chrome").build();

  try {
    console.log("\n=== üü° D√âMARRAGE DU TEST E2E ===\n");

    console.log("üåê Acc√®s √† l‚Äôapplication...");
    await driver.get("http://localhost:3000");
    await sleep(1000);

    // === 1. AJOUT UTILISATEUR ===
    console.log("\n--- ‚ûï AJOUT UTILISATEUR ---");

    const usernameInput = await driver.findElement(By.name("username"));
    const emailInput = await driver.findElement(By.name("email"));
    const addUserBtn = await driver.findElement(By.id("addUserBtn"));

    console.log("üì• Remplissage du formulaire...");
    await usernameInput.sendKeys("Alice");
    await sleep(500);
    await emailInput.sendKeys("alice@example.com");
    await sleep(500);

    console.log('üñ±Ô∏è Clic sur le bouton "Ajouter"...');
    await addUserBtn.click();
    await sleep(1000);

    console.log('üîé Recherche de "Alice"...');
    await driver.wait(async () => {
      const rows = await driver.findElements(By.css("#usersTable tbody tr"));
      return rows.length > 0;
    }, 5000);

    let aliceRow;
    const rowsAfterAdd = await driver.findElements(
      By.css("#usersTable tbody tr")
    );
    for (const row of rowsAfterAdd) {
      const text = await row.getText();
      if (text.includes("Alice") && text.includes("alice@example.com")) {
        aliceRow = row;
        break;
      }
    }

    if (!aliceRow) {
      console.error('‚ùå √âchec : utilisateur "Alice" non trouv√©.');
      throw new Error('Utilisateur "Alice" non trouv√© apr√®s ajout');
    }

    console.log('‚úÖ Utilisateur "Alice" ajout√© avec succ√®s.');

    // === 2. MODIFICATION UTILISATEUR ===
    console.log("\n--- ‚úèÔ∏è MODIFICATION UTILISATEUR ---");

    console.log('üîß Clic sur le bouton "√âditer"...');
    const editButton = await aliceRow.findElement(
      By.xpath(".//button[contains(text(), '√âditer')]")
    );
    await editButton.click();
    await sleep(500);

    console.log("üí¨ Remplissage du prompt (nouveau nom)...");
    const usernamePrompt = await driver.switchTo().alert();
    await usernamePrompt.sendKeys("Alice Modifi√©e");
    await usernamePrompt.accept();
    await sleep(500);

    console.log("üí¨ Remplissage du prompt (nouvel email)...");
    const emailPrompt = await driver.switchTo().alert();
    await emailPrompt.sendKeys("alice.mod@example.com");
    await emailPrompt.accept();
    await sleep(1000);

    console.log("üîé V√©rification de la modification...");
    const rowsAfterEdit = await driver.findElements(
      By.css("#usersTable tbody tr")
    );
    let foundModified = false;
    let modifiedRow;
    for (const row of rowsAfterEdit) {
      const text = await row.getText();
      if (
        text.includes("Alice Modifi√©e") &&
        text.includes("alice.mod@example.com")
      ) {
        foundModified = true;
        modifiedRow = row;
        break;
      }
    }

    if (!foundModified) {
      console.error("‚ùå √âchec : modification non d√©tect√©e.");
      throw new Error("Modification non refl√©t√©e dans le tableau");
    }

    console.log("‚úÖ Utilisateur modifi√© avec succ√®s.");

    // === V√©rification du surlignage jaune ===
    console.log("üí° V√©rification du surlignage jaune...");
    const classAttr = await modifiedRow.getAttribute("class");
    if (classAttr && classAttr.includes("highlight")) {
      console.log("‚úÖ Ligne modifi√©e est surlign√©e en jaune.");
    } else {
      console.error("‚ùå Ligne modifi√©e NON surlign√©e.");
      throw new Error("Surlignage jaune manquant apr√®s modification");
    }

    // === 3. SUPPRESSION UTILISATEUR ===
    console.log("\n--- üóëÔ∏è SUPPRESSION UTILISATEUR ---");

    console.log('üñ±Ô∏è Clic sur "Supprimer"...');
    const deleteButton = await modifiedRow.findElement(
      By.xpath(".//button[contains(text(), 'Supprimer')]")
    );
    await deleteButton.click();
    await sleep(1000);

    console.log("üîé V√©rification de la suppression...");
    const rowsAfterDelete = await driver.findElements(
      By.css("#usersTable tbody tr")
    );
    let stillExists = false;
    for (const row of rowsAfterDelete) {
      const text = await row.getText();
      if (
        text.includes("Alice Modifi√©e") ||
        text.includes("alice.mod@example.com")
      ) {
        stillExists = true;
        break;
      }
    }

    if (stillExists) {
      console.error(
        "‚ùå √âchec : utilisateur toujours pr√©sent apr√®s suppression."
      );
      throw new Error("Utilisateur non supprim√© correctement");
    }

    console.log("‚úÖ Utilisateur supprim√© avec succ√®s.");

    console.log("\n=== ‚úÖ TEST E2E TERMIN√â AVEC SUCC√àS ===\n");
  } catch (err) {
    console.error("‚ùå Erreur durant le test E2E :", err.message);

    await createJiraIssue(
      "Erreur lors du test E2E",
      `Le test E2E a √©chou√© avec l‚Äôerreur suivante :\n${err.stack}`
    );
  } finally {
    console.log("üßπ Fermeture du navigateur...");
    await sleep(1000);
    await driver.quit();
  }
}

testE2E();
